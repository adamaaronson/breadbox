{"version":3,"sources":["components/Header.js","services/firebase.js","pages/Welcome.js","pages/GameSetup.js","components/QuestionLog.js","pages/Guesser.js","pages/Answerer.js","pages/Endgame.js","App.js","index.js"],"names":["Header","className","src","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","database","Welcome","props","state","name","roomCode","joiningRoom","settingUpGame","handleNameChange","bind","handleNameSubmit","handleRoomCodeChange","handleCreateRoomClick","handleJoinRoomClick","handleRoomCodeSubmit","event","preventDefault","this","setState","target","value","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","generateID","ref","set","started","finished","answererID","memberIDs","questions","userID","key","updates","update","onSetUserID","onSetUserName","onSetRoomCode","onSetAnswerer","code","once","then","snapshot","exists","isValidRoomCode","isValid","alert","to","onSubmit","htmlFor","id","type","onChange","disabled","onClick","Component","GameSetup","thing","currentPlayers","beginningGame","answererName","handleThingChange","handleSubmitThing","a","console","log","remove","on","players","forEach","person","val","snap","off","isAnswerer","QuestionLog","awaitQuestions","data","newQuestionData","questionText","userName","answer","isGuess","newQuestions","slice","reverse","map","question","index","Fragment","startsWith","Guesser","guess","handleQuestionChange","handleGuessChange","handleQuestionSubmit","handleGuessSubmit","timestamp","Date","getTime","placeholder","Answerer","handleClickAnswer","newQuestion","questionID","prevState","shift","noQuestions","Endgame","winnerName","nextAnswererSelected","prevAnswererID","firstLoad","setNextAnswerer","answerIDRef","player","App","setAnswerer","setRoomCode","setUserID","setUserName","basicPath","exact","path","getRealPath","render","isPreviousAnswerer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82280d6a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <div className=\"title-box\">\n                <img className=\"logo\" src=\"logo.png\" />\n                <div className=\"title-and-subtitle\">\n                    <h1 className=\"title\">\n                        Breadbox\n                    </h1>\n                    <h4 className=\"subtitle\">\n                        Asking the real questions!\n                    </h4>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import firebase from 'firebase/app'\nimport 'firebase/database'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBqT3oIwoJSdKuj4iq_m2EBK1bh4TnSLbg\",\n    authDomain: \"breadbox-147c2.firebaseapp.com\",\n    projectId: \"breadbox-147c2\",\n    storageBucket: \"breadbox-147c2.appspot.com\",\n    messagingSenderId: \"458411662648\",\n    appId: \"1:458411662648:web:fcd2c043f4fe74769c35cd\",\n    measurementId: \"G-1N4225LKW7\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.database();\nexport default db;","import '../css/Welcome.scss'\nimport React, { Component } from 'react'\nimport Header from '../components/Header.js'\nimport {BrowserRouter as Router, Link, Route, Redirect} from 'react-router-dom'\nimport db from '../services/firebase.js'\n\nconst ROOM_CODE_LENGTH = 5;\n\nexport default class Welcome extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            roomCode: '',\n            joiningRoom: false,\n            settingUpGame: false\n        }\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleNameSubmit = this.handleNameSubmit.bind(this);\n        this.handleRoomCodeChange = this.handleRoomCodeChange.bind(this);\n        this.handleCreateRoomClick = this.handleCreateRoomClick.bind(this);\n        this.handleJoinRoomClick = this.handleJoinRoomClick.bind(this);\n        this.handleRoomCodeSubmit = this.handleRoomCodeSubmit.bind(this);\n    }\n\n    handleNameChange(event) {\n        event.preventDefault();\n        this.setState({\n            name: event.target.value\n        })\n    }\n\n    handleNameSubmit(event) {\n        event.preventDefault();\n    }\n\n    handleRoomCodeChange(event) {\n        event.preventDefault();\n        this.setState({\n            roomCode: event.target.value\n        })\n    }\n\n    /**\n     * Generates a random room code\n     */\n    generateID(length) {\n        var result = [];\n        var characters = '0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n        }\n        return result.join('');\n    }\n\n    /**\n     * Creates a new game room and adds the user.\n     */\n    handleCreateRoomClick() {\n        // Create a new room\n        let roomCode = this.generateID(ROOM_CODE_LENGTH);\n        db.ref(\"games/\" + roomCode).set({\n            started: false,\n            finished: false,\n            answererID: null,\n            memberIDs: [],\n            questions: []\n        })\n\n        // Create a new ID for the current user\n        let userID = db.ref(\"games/\" + roomCode + \"/memberIDs\").push({\n            name: this.state.name\n        }).key;\n        \n        // Add that user ID to the game\n        let updates = {};\n        updates[\"/games/\" + roomCode + \"/answererID\"] = userID;\n        db.ref().update(updates);\n\n        this.props.onSetUserID(userID);\n        this.props.onSetUserName(this.state.name);\n        this.props.onSetRoomCode(roomCode);\n\n        this.props.onSetAnswerer(true);\n        this.setState({\n            settingUpGame: true\n        })\n    }\n\n    /**\n     * When the user hits \"join room\", displays the room ID text box.\n     */\n    handleJoinRoomClick() {\n        this.setState({\n            joiningRoom: true\n        })\n    }\n\n    // Returns a promise that is satisfied when room code is evaluated to valid or invalid\n    isValidRoomCode(code) {\n        return db.ref(\"games/\" + code).once(\"value\").then(\n            snapshot => snapshot.exists()\n        )\n    }\n\n    /**\n     * Creates a new user and adds them to an existing room\n     */\n    handleRoomCodeSubmit(event) {\n        event.preventDefault()\n        let code = this.state.roomCode;\n        this.isValidRoomCode(code).then((isValid) => {\n            if (isValid) {\n                // Add the user to the room\n                let userID = db.ref(\"games/\" + code + \"/memberIDs\").push({\n                    name: this.state.name\n                }).key;\n\n                this.props.onSetRoomCode(code);\n                this.props.onSetUserID(userID);\n                this.props.onSetUserName(this.state.name);\n                this.props.onSetAnswerer(false);\n                this.setState({\n                    settingUpGame: true\n                })\n            } else {\n                alert(\"Invalid room code!\")\n            }\n        })    \n    }\n\n    render() {\n        return (\n            this.state.settingUpGame ? (\n                <Redirect to=\"./setup\" />\n            ) : (\n                <div className=\"welcome-page-wrapper\">\n                    <div className=\"welcome-page\">\n                        <Header />\n                        <p className=\"game-description\">\n                            Play Twenty Questions online with your friends!\n                        </p>\n                        {/* Enter the user name */}\n                        <form className=\"name-form\" onSubmit={this.handleNameSubmit}>\n                            <label htmlFor=\"enter-name\" className=\"enter-name-label\">\n                                What's your name?\n                            </label>\n                            <input\n                                className=\"enter-name\"\n                                id=\"enter-name\"\n                                type=\"text\"\n                                onChange={this.handleNameChange}>\n                            </input>\n                        </form>\n\n                        {/* Create a new room, only if a name is entered */}\n                        <button\n                            className=\"create-room\"\n                            disabled={this.state.name === ''}\n                            onClick={this.handleCreateRoomClick}>\n                            Create new room\n                        </button>\n\n                        {/* Join an existing room, only if a name is entered. \n                            Prompts entry of a join code */}\n                        <button\n                            className=\"join-room\"\n                            disabled={this.state.name === ''}\n                            onClick={this.handleJoinRoomClick}>\n                            Join room\n                        </button>\n\n                        {/* Joins an existing room upon join code entry. */}\n                        \n                        {this.state.joiningRoom &&\n                        <>\n                            <div className=\"enter-room-code-label\">\n                                Enter room code:\n                            </div>\n                            <form className=\"room-code-form\" onSubmit={this.handleRoomCodeSubmit}>\n                                <input\n                                    className=\"enter-room-code\"\n                                    id=\"enter-room-code\"\n                                    type=\"text\"\n                                    onChange={this.handleRoomCodeChange}>\n                                </input>\n                                <button\n                                    type=\"submit\"\n                                    className=\"room-code-button\" disabled={this.state.roomCode === \"\"}>\n                                    Submit\n                                </button>\n                            </form>\n                        </>\n                        }\n                    </div>\n                </div>\n            )\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Header from '../components/Header.js'\nimport {BrowserRouter as Router, Link, Route, Redirect} from 'react-router-dom'\nimport db from '../services/firebase';\nimport '../css/GameSetup.scss'\n\nexport default class GameSetup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            thing: '',\n            currentPlayers: [],\n            beginningGame: false,\n            answererName: ''\n        };\n\n        this.handleThingChange = this.handleThingChange.bind(this)\n        this.handleSubmitThing = this.handleSubmitThing.bind(this)\n    }\n\n    handleThingChange(event) {\n        this.setState({\n            thing: event.target.value\n        })\n    }\n\n    /* Updates in real-time as players join the game */\n    async componentDidMount() {\n        console.log(\"Game setup loaded\");\n\n        db.ref(\"games/\" + this.props.roomCode + \"/questions\").remove();\n\n        db.ref(\"games/\" + this.props.roomCode + \"/memberIDs\").on(\"value\", snapshot => {\n            let players = []\n            snapshot.forEach((person) => {\n                players.push(person.val().name);\n            })\n            this.setState({\n                currentPlayers: players\n            })\n        })\n\n        db.ref(\"games/\" + this.props.roomCode + \"/started\").on(\"value\", snapshot => {\n            const data = snapshot.val();\n            if (data) {\n                this.setState({\n                    beginningGame: true\n                })\n            }\n        })\n\n        // Loads in the answerer's name\n        db.ref('games/' + this.props.roomCode + \"/answererID\").once(\"value\", (snapshot) => {\n            db.ref('games/' + this.props.roomCode + \"/memberIDs/\" + snapshot.val()).once(\"value\", (snap) => {\n                this.setState({\n                    answererName: snap.val().name\n                })\n                console.log(snap.val().name)\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        db.ref(\"games/\" + this.props.roomCode + \"/memberIDs\").off();\n        db.ref(\"games/\" + this.props.roomCode + \"/started\").off();\n    }\n\n    /* Called after the Answerer submits a \"thing\". Starts the game round. */\n    handleSubmitThing(event) {\n        event.preventDefault();\n        //this.props.onSubmitThing(this.state.thing);\n        let updates = {};\n        updates[\"games/\" + this.props.roomCode + \"/started\"] = true;\n        updates[\"games/\" + this.props.roomCode + \"/thing\"] = this.state.thing;\n        db.ref().update(updates);\n    }\n\n    render() {\n        return (\n            this.state.beginningGame ? (\n                <Redirect to=\"./game\" />\n            ) : (\n                <div className=\"game-page game-setup-page\">\n                    <Header />\n                    \n                    <h2 className=\"game-setup-header\">\n                        You're {this.props.isAnswerer ? \"answering\" : \"guessing\"} this round!\n                    </h2>\n\n                    <div className=\"room-code-box\">\n                        <h3 className=\"send-the-code\">\n                            Send your friends this code:\n                        </h3>\n                        <h1 className=\"room-code\">\n                            {this.props.roomCode}\n                        </h1>\n                    </div>\n\n                    <div className=\"current-players-list\">\n                        <h3 className=\"current-players-header\">\n                            People playing:\n                        </h3>\n                        <h2>\n                            {this.state.currentPlayers.join(\", \")}\n                        </h2>\n                    </div>\n\n                    \n\n                    \n                    \n                    {this.props.isAnswerer ? (\n                        <form className=\"thing-input-form\" onSubmit={this.handleSubmitThing}>\n                            <h2 className=\"thing-input-label\" htmlFor=\"thing-input-box\">\n                                What are you thinking of?\n                            </h2>\n                            <h4>\n                                (don't tell anyone!)\n                            </h4>\n                            <input\n                                className=\"thing-input-box\"\n                                id=\"thing-input-box\"\n                                type=\"text\"\n                                onChange={this.handleThingChange}>\n                            </input>\n                            <button type=\"submit\" disabled={this.state.thing === \"\"}>\n                                Start game!\n                            </button>\n                        </form>\n                    ) : (\n                        <div>\n                            <h3>\n                                Waiting for {this.state.answererName} to pick a thing...\n                            </h3>\n                        </div> \n                    )}\n                </div>\n            )\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport db from '../services/firebase.js';\n\nexport default class QuestionLog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            awaitQuestions: true,\n            questions: []\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({\n            awaitQuestions: true\n        })\n        db.ref(\"games/\" + this.props.roomCode + \"/questions\").on('child_changed', (data) => {\n            if (this.state.awaitQuestions) {\n                let newQuestionData = {\n                    questionText: data.val().questionText,\n                    userName: data.val().userName,\n                    answer: data.val().answer,\n                    isGuess: data.val().isGuess\n                };\n\n                let newQuestions = this.state.questions;\n                newQuestions.push(newQuestionData);\n                \n                this.setState({\n                    questions: newQuestions\n                })\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        this.setState({\n            awaitQuestions: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h3 className=\"question-log-title\">\n                    Answer log\n                </h3>\n                {this.state.questions.length == 0 ? (\n                    <div className=\"no-questions\">\n                        No questions answered!\n                    </div>\n                ) : (\n                    <div className=\"question-log-table\">\n                        {this.state.questions.slice(0).reverse().map((question, index) => \n                            <React.Fragment key={\"q\" + index}>\n                                <span className=\"question-number\">\n                                    {this.state.questions.length - index}\n                                </span>\n                                <span className=\"question-log-name\">\n                                    {question.userName} {question.isGuess ? \"guessed:\" : \"asked:\"}\n                                </span>\n                                <span className=\"question-log-question\">\n                                    {question.questionText}\n                                </span>\n                                <span className={\"question-log-answer \" + (question.answer.startsWith(\"No\") ? \"answer-no\" : \"\") + (question.answer.startsWith(\"Yes\") ? \"answer-yes\" : \"\")}>\n                                    {question.answer}\n                                </span>\n                            </React.Fragment>\n                        )}\n                    </div>\n                )}\n                \n                \n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport QuestionLog from '../components/QuestionLog.js'\nimport Header from '../components/Header.js'\nimport {BrowserRouter as Router, Link, Route, Redirect} from 'react-router-dom'\nimport db from '../services/firebase.js';\nimport '../css/Player.scss'\n\nexport default class Guesser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            question: '',\n            guess: '',\n            finished: false,\n            answererName: '',\n        }\n\n        this.handleQuestionChange = this.handleQuestionChange.bind(this);\n        this.handleGuessChange = this.handleGuessChange.bind(this);\n        this.handleQuestionSubmit = this.handleQuestionSubmit.bind(this);\n        this.handleGuessSubmit = this.handleGuessSubmit.bind(this);\n    }\n\n    handleQuestionChange(event) {\n        this.setState({\n            question: event.target.value\n        })\n    }\n\n    handleGuessChange(event) {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n\n    async componentDidMount() {\n        db.ref('games/' + this.props.roomCode + \"/finished\").on(\"value\", (snapshot) => {\n            if (snapshot.val()) {\n                this.setState({\n                    finished: true\n                });\n            }\n        })\n\n        // Loads in the answerer's name\n        db.ref('games/' + this.props.roomCode + \"/answererID\").once(\"value\", (snapshot) => {\n            db.ref('games/' + this.props.roomCode + \"/memberIDs/\" + snapshot.val()).once(\"value\", (snap) => {\n                this.setState({\n                    answererName: snap.val().name\n                })\n                console.log(snap.val().name)\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        db.ref('games/' + this.props.roomCode + \"/finished\").off();\n    }\n\n    handleQuestionSubmit(event) {\n        event.preventDefault();\n        db.ref(\"games/\" + this.props.roomCode + \"/questions\").push({\n            timestamp: (new Date()).getTime(),\n            questionText: this.state.question,\n            userName: this.props.userName,\n            isGuess: false,\n            answer: null\n        })\n        this.setState({\n            question: ''\n        })\n    }\n\n    handleGuessSubmit(event) {\n        event.preventDefault();\n        db.ref(\"games/\" + this.props.roomCode + \"/questions\").push({\n            timestamp: (new Date()).getTime(),\n            questionText: this.state.guess,\n            userName: this.props.userName,\n            isGuess: true,\n            answer: null\n        })\n        this.setState({\n            guess: ''\n        })\n    }\n\n    render() {\n        return this.state.finished ? (\n            <Redirect to=\"./end\" />\n        ) : (\n            <div className=\"game-page guesser-page\">\n                <Header />\n                <div className=\"player-info-boxes\">\n                    <h3 className=\"player-name-box\">\n                        Name: {this.props.userName}\n                    </h3>\n                    <h3 className=\"player-roomcode-box\">\n                        Room code: {this.props.roomCode}\n                    </h3>\n                </div>\n\n                <h3 className=\"thing-youre-thinking-of\">{this.state.answererName} is thinking of something...</h3>\n\n                <div className=\"player-body\">\n                <div className=\"player-body-main\">\n                    <form className=\"question-form\" onSubmit={this.handleQuestionSubmit}>\n                            <label className=\"question-box-label\" htmlFor=\"question-input-box\">\n                                Ask a question:\n                            </label>\n                            <div className=\"guesser-input-wrapper\">\n                                <input\n                                    className=\"guesser-input\"\n                                    id=\"question-input-box\"\n                                    type=\"text\"\n                                    value={this.state.question}\n                                    onChange={this.handleQuestionChange}\n                                    placeholder=\"Is it bigger than a breadbox?\">\n                                </input>\n                                <button type=\"submit\" disabled={this.state.question === \"\"}>\n                                    Ask\n                                </button>\n                            </div>\n                        </form>\n\n                        <form className=\"guess-form\" onSubmit={this.handleGuessSubmit}>\n                            <label className=\"question-box-label\" htmlFor=\"guess-input-box\">\n                                Venture a guess:\n                            </label>\n                            <div className=\"guesser-input-wrapper\">\n                                <input\n                                    className=\"guesser-input\"\n                                    id=\"guess-input-box\"\n                                    type=\"text\"\n                                    value={this.state.guess}\n                                    onChange={this.handleGuessChange}\n                                    placeholder=\"Bread\">\n                                </input>\n                                <button type=\"submit\" disabled={this.state.guess === \"\"}>\n                                    Guess\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                    <QuestionLog roomCode={this.props.roomCode}/>\n                </div>\n                    \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport QuestionLog from '../components/QuestionLog.js'\nimport Header from '../components/Header.js'\nimport {BrowserRouter as Router, Link, Route, Redirect} from 'react-router-dom'\nimport db from '../services/firebase.js'\nimport '../css/Player.scss'\n\nexport default class Answerer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            answer: '',\n            thing: '',\n            finished: false\n        }\n        \n        this.handleClickAnswer = this.handleClickAnswer.bind(this)\n    }\n\n    /**\n     * Updates the question \"queue\" as Guessers ask questions/guesses\n     */\n    async componentDidMount() {\n\n        // Update the question queue\n        var questionsRef = db.ref(\"games/\" + this.props.roomCode + \"/questions\");\n        questionsRef.on('child_added', (data) => {\n            const newQuestion = {\n                questionID: data.key,\n                userName: data.val().userName,\n                questionText: data.val().questionText,\n                isGuess: data.val().isGuess\n            };\n\n            this.setState(prevState => {\n                prevState.questions.push(newQuestion);\n                return prevState;\n            })\n        });\n\n        // Load in the game \"thing\"\n        db.ref(\"games/\" + this.props.roomCode + \"/thing\").once('value', (snapshot) => {\n            this.setState({\n                thing: snapshot.val()\n            })\n        })\n\n        // Check for if the game is finished\n        db.ref('games/' + this.props.roomCode + \"/finished\").on(\"value\", (snapshot) => {\n            if (snapshot.val()) {\n                this.setState({\n                    finished: true\n                });\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        db.ref(\"games/\" + this.props.roomCode + \"/questions\").off();\n        db.ref('games/' + this.props.roomCode + \"/finished\").off();\n    }\n\n    /**\n     * Marks the question/guess with an answer and updates the queue\n     */\n    handleClickAnswer(event) {\n        event.preventDefault();\n        let updates = {};\n        updates[\"/games/\" + this.props.roomCode + \"/questions/\" + this.state.questions[0].questionID + \"/answer\"] = event.target.value;\n        db.ref().update(updates);\n        \n        if (this.state.questions[0].isGuess && event.target.value.startsWith(\"Yes\")) {\n            updates = {};\n            updates[\"/games/\" + this.props.roomCode + \"/finished\"] = true;\n            updates[\"/games/\" + this.props.roomCode + \"/winnerName\"] = this.state.questions[0].userName;\n            db.ref().update(updates);\n        }\n\n        // Append to questions list\n        this.setState(prevState => {\n            prevState.questions.shift();\n            return prevState;\n        })\n    }\n\n    render() {\n        let noQuestions = this.state.questions.length === 0;\n        return this.state.finished ? (\n            <Redirect to=\"./end\" />\n        ) : (\n            <div className=\"game-page answerer-page\">\n                <Header />\n                <div className=\"player-info-boxes\">\n                    <h3 className=\"player-name-box\">\n                        Name: {this.props.userName}\n                    </h3>\n                    <h3 className=\"player-roomcode-box\">\n                        Room code: {this.props.roomCode}\n                    </h3>\n                </div>\n\n                <p>You are thinking of...</p>\n                <h2 className=\"thing-youre-thinking-of\">\n                    {this.state.thing}\n                </h2>\n\n                <div className=\"player-body\">\n                    <div className=\"player-body-main\">\n                        {noQuestions ? (\n                            <h3 className=\"question-box\">\n                                Waiting for questions...\n                            </h3>\n                        ) : (\n                            <div className=\"question-box\">\n                                <h4 className=\"person-asking\">\n                                    {this.state.questions[0].userName} {this.state.questions[0].isGuess ? \"guesses\" : \"asks\"}...\n                                </h4>\n                                <h3 className=\"question-asked\">\n                                    {this.state.questions[0].questionText}\n                                </h3>\n                            </div>\n                        )}\n                        {noQuestions || !this.state.questions[0].isGuess ? (\n                            <div className=\"question-answer-buttons\">\n                                <div className=\"big-answer-buttons\">\n                                    <button className=\"yes-button\" value=\"Yes\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Yes\n                                    </button>\n                                    <button className=\"no-button\" value=\"No\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        No\n                                    </button>\n                                </div>\n                                <div className=\"small-answer-buttons\">\n                                    <button value=\"Sometimes\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Sometimes\n                                    </button>\n                                    <button value=\"Not sure\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Not sure\n                                    </button>\n                                    <button value=\"Irrelevant\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Irrelevant\n                                    </button>\n                                </div>\n                            </div>\n                        ) : (\n                            <div className=\"question-answer-buttons\">\n                                <div className=\"big-answer-buttons\">\n                                    <button className=\"yes-button\" value=\"Yes!\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Yes!\n                                    </button>\n                                    <button className=\"no-button\" value=\"No\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        No\n                                    </button>\n                                </div>\n                                <div className=\"small-answer-buttons\">\n                                    <button value=\"Close!\" disabled={noQuestions} onClick={this.handleClickAnswer}>\n                                        Close!\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <QuestionLog roomCode={this.props.roomCode}/>\n                </div>\n                    \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport db from '../services/firebase.js'\nimport Header from '../components/Header.js'\nimport { BrowserRouter as Router, Link, Route, Redirect } from 'react-router-dom'\nimport '../css/Endgame.scss'\n\nexport default class Endgame extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayers: [],\n            winnerName: '',\n            thing: '',\n            nextAnswererSelected: false,\n            prevAnswererID: '',\n            firstLoad: true\n        };\n\n        this.setNextAnswerer = this.setNextAnswerer.bind(this)\n    }\n\n    async componentDidMount() {\n        // Load in all the current players\n        db.ref(\"games/\" + this.props.roomCode + \"/memberIDs\").once(\"value\", snapshot => {\n            let players = []\n            snapshot.forEach((person) => {\n                players.push({\n                    userID: person.key,\n                    userName: person.val().name\n                });\n            })\n            this.setState({\n                currentPlayers: players\n            })\n        })\n\n        // Load in the game winner\n        db.ref(\"games/\" + this.props.roomCode + \"/winnerName\").once('value', (snapshot) => {\n            this.setState({\n                winnerName: snapshot.val()\n            })\n        })\n\n        // Load in the game \"thing\"\n        db.ref(\"games/\" + this.props.roomCode + \"/thing\").once('value', (snapshot) => {\n            this.setState({\n                thing: snapshot.val()\n            })\n        })\n\n        // Load in the game \"prevAnswererID\"\n        db.ref(\"games/\" + this.props.roomCode + \"/answererID\").once('value', (snapshot) => {\n            this.setState({\n                prevAnswererID: snapshot.val()\n            })\n        })\n\n        // Listen for when the next answerer is selected\n        const answerIDRef = db.ref(\"games/\" + this.props.roomCode + \"/answererID\");\n        db.ref(\"games/\" + this.props.roomCode + \"/finished\").on('value', (snapshot) => {\n            answerIDRef.once('value', (snapshot) => {\n                this.props.onSetAnswerer(snapshot.val() === this.props.userID);\n            })\n            \n            if (!this.state.firstLoad) {\n                this.setState({\n                    nextAnswererSelected: true\n                });\n            }\n\n            this.setState({\n                firstLoad: false\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        db.ref(\"games/\" + this.props.roomCode + \"/finished\").off();\n    }\n\n    setNextAnswerer(event) {\n        event.preventDefault();\n\n        let updates = {};\n        updates[\"/games/\" + this.props.roomCode + \"/answererID/\"] = event.target.value;\n        updates[\"/games/\" + this.props.roomCode + \"/started\"] = false;\n        updates[\"/games/\" + this.props.roomCode + \"/finished\"] = false;\n        db.ref().update(updates);\n    }\n\n    render() {\n        return this.state.nextAnswererSelected ? (\n            <Redirect to=\"./setup\" />\n        ) : (\n            <div className=\"game-page endgame-page\">\n                <Header />\n                <h2 className=\"winner-announcement\">\n                    {this.state.winnerName} won the game!\n                </h2>\n                <h3 className=\"thing-announcement\">\n                    The answer was {this.state.thing}.\n                </h3>\n\n                {/* <h2>Current Players: </h2>\n                {this.state.currentPlayers.map(player => (\n                    <p key={player.userID}>{player.userName}</p>\n                ))} */}\n\n                {this.props.isAnswerer ? (\n                    <div>\n                        <h3 className=\"player-name-button-header\">\n                            Who's thinking of something next?\n                        </h3>\n                        <div>\n                            {this.state.currentPlayers.map(player => (\n                                <button\n                                    className=\"player-name-button\"\n                                    value={player.userID}\n                                    key={player.userID}\n                                    onClick={this.setNextAnswerer}>\n                                    {player.userName}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <h3 className=\"player-name-button-header\">\n                            Waiting for the next answerer to be chosen...\n                        </h3>\n                    </div>\n                    \n                )}\n            </div>\n        )\n    }\n}\n","import './css/App.scss'\nimport React, { Component } from 'react'\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Welcome from './pages/Welcome.js'\nimport GameSetup from './pages/GameSetup.js'\nimport Guesser from './pages/Guesser.js'\nimport Answerer from './pages/Answerer.js'\nimport Endgame from './pages/Endgame.js'\n\nconst IS_DEPLOY = true;\nconst PATH_PREFIX = \"/breadbox\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userID: '',\n            userName: '',\n            roomCode: '',\n            isAnswerer: true,\n        }\n\n        this.setAnswerer = this.setAnswerer.bind(this);\n        //this.setNextAnswerer = this.setNextAnswerer.bind(this);\n        this.setRoomCode = this.setRoomCode.bind(this);\n        this.setUserID = this.setUserID.bind(this);\n        this.setUserName = this.setUserName.bind(this);\n    }\n\n    /* Functions for child components to control App state */\n\n    setAnswerer(isAnswerer) {\n        this.setState({\n            isAnswerer: isAnswerer\n        })\n    }\n\n    // setNextAnswerer(nextAnswerer) {\n    //     if (nextAnswerer.userID === this.state.userID) {\n    //         this.setState({\n    //             isAnswerer: true\n    //         })\n    //     } else {\n    //         this.setState({\n    //             isAnswerer: false\n    //         })\n    //     }\n    // }\n\n    setRoomCode(roomCode) {\n        this.setState({\n            roomCode: roomCode\n        })\n    }\n\n    setUserID(userID) {\n        this.setState({\n            userID: userID\n        })\n    }\n\n    setUserName(userName) {\n        this.setState({\n            userName: userName\n        })\n    }\n\n    getRealPath(basicPath) {\n        if (IS_DEPLOY) {\n            return PATH_PREFIX + basicPath\n        } else {\n            return basicPath\n        }\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"app\">\n                    <div className=\"authors\">\n                        Created by Adam Aaronson and Cale Wolf for HackIllinois 2021 😎\n                    </div>\n                    <Route exact path={this.getRealPath(\"/\")} render={() => (\n                        <Welcome\n                            onSetRoomCode={this.setRoomCode}\n                            onSetAnswerer={this.setAnswerer}\n                            onSetUserID={this.setUserID}\n                            onSetUserName={this.setUserName}\n                        />\n                    )}/>\n\n                    <Route exact path={this.getRealPath(\"/setup\")} render={() => (\n                        <GameSetup\n                            roomCode={this.state.roomCode}\n                            isAnswerer={this.state.isAnswerer}\n                        />\n                    )}/>\n                    \n                    <Route exact path={this.getRealPath(\"/game\")} render={() => (\n                        this.state.isAnswerer ? (\n                            <Answerer\n                                userID={this.state.userID}\n                                userName={this.state.userName}\n                                roomCode={this.state.roomCode}\n                            />\n                        ) : (\n                            <Guesser\n                                userID={this.state.userID}\n                                userName={this.state.userName}\n                                roomCode={this.state.roomCode}\n                            />\n                        )\n                    )}/>\n                    <Route exact path={this.getRealPath(\"/end\")} render={() => (\n                        <Endgame\n                            roomCode={this.state.roomCode}\n                            isAnswerer={this.state.isAnswerer}\n                            thing={this.state.thing}\n                            userID={this.state.userID}\n                            isPreviousAnswerer={this.state.isAnswerer}\n                            onSetAnswerer={this.setAnswerer}\n                        />\n                    )}/>\n                </div>\n            </Router>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}